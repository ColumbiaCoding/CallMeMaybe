import * as twgl from "twgl.js";
import { FramebufferInfo } from "twgl.js";
import { UniformDataMap } from "../types";
import { WebglProfiler } from "./webgl-profiler";
export interface WebglPipelineProgramOptions {
    context: WebGLRenderingContext;
    width: number;
    height: number;
    disableFramebuffer?: boolean;
}
/**
 * Webgl pipeline program plugable to a webgl pipeline
 *
 * Some uniforms are automatically updated/binded to shaders:
 *  - float delta: time difference between two run, in seconds
 *  - vec2 canvas: canvas dimension, in px
 */
export declare abstract class WebglPipelineProgram<O extends WebglPipelineProgramOptions = WebglPipelineProgramOptions> {
    id: string;
    /**
     * Webgl context used by the program
     */
    context: WebGLRenderingContext;
    /**
     * Texture containing the result of the program
     */
    output: WebGLTexture;
    /**
     * Framebuffer infos used for the output of the program
     */
    fbi: FramebufferInfo;
    /**
     * Options used to instantiate the program
     */
    options: O;
    /**
     * Program infos
     */
    private programInfo;
    /**
     * Buffers infos used by the program
     */
    private bufferInfo;
    private profiler?;
    constructor(options: O);
    resizeOutput(width: number, height: number): void;
    /**
     * Return the fragment shader source
     * @returns shader source
     */
    protected abstract getFragmentShader(): string;
    /**
     * Return the vertex shader source
     * @returns shader source
     */
    protected abstract getVertexShader(): string;
    /**
     * Return a list of defines prepend to the shaders
     * @returns Object where key is the define name and value the define value
     */
    protected getDefines(): {
        [key: string]: number;
    };
    /**
     * Return a list of buffers used by the program
     * The buffers are uploaded only once at the initialization
     * @returns Buffer map
     */
    protected getBuffers(): twgl.Arrays;
    /**
     * Build prependable string to shaders source containing the defines returned by getDefines.
     * @returns Prependable string
     */
    private buildDefines;
    /**
     * Last time the program run.
     * Used to compute delta uniform
     */
    private lastRun?;
    /**
     * Run the program
     * @param uniforms Data to used for the uniforms
     */
    run(uniforms: UniformDataMap): void;
    setProfiler(profiler?: WebglProfiler): void;
}
