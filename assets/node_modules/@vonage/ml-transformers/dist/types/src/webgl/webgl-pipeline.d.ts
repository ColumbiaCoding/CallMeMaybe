import { UniformDataMap } from "../types";
import { WebglProfiler } from "./webgl-profiler";
import { WebglPipelineProgram } from "./webgl-pipeline-program";
/**
 * Program pipeline run infos
 */
export interface WebglPipelineStep {
    /**
     * Pipeline program to run
     */
    program: WebglPipelineProgram;
    /**
     * Function returning the uniform to bind to the program
     * @returns Object containing for each uniform a pair key/value name/value
     */
    getUniforms: () => UniformDataMap;
    /**
     * If set to true, the step won't be rescale if the output is resized
     */
    preventResize?: boolean;
}
/**
 * Webgl pipeline. Run pipeline program one after one
 */
export declare class WebglPipeline {
    /**
     * Pipeline program infos to run
     */
    private steps;
    /**
     * Add a program pipeline to the rendering pipeline
     * @param step Program pipeline infos
     */
    addStep(step: WebglPipelineStep): void;
    /**
     * Run the pipeline
     */
    run(): Promise<void>;
    resizeOutput(width: number, height: number): void;
    private profiler?;
    setProfiler(profiler?: WebglProfiler): void;
    setId(id: string): void;
}
