import { EventDataMap, MediaProcessorInterface } from "@vonage/media-processor";
import Emittery from "emittery";
import { BackgroundOptions, MediaProcessorConfig } from "../../main";
import { FlickeringOptions } from "../webgl/pipelines/improve-segmentation-mask";
import { ResolvedWebglQuery } from "../webgl/webgl-profiler";
export declare enum WorkerOperations {
    init = "init",
    transform = "transform",
    destroy = "destroy",
    setBackgroundOptions = "setBackgroundOptions",
    setVideoBGReadable = "setVideoBGReadable",
    setVirtualBGImage = "setVirtualBGImage",
    setTrackExpectedRate = "setTrackExpectedRate"
}
export interface InnerEventDataMap {
    initResults: string;
    transformResults: string;
    destroyResults: string;
    setBackgroundOptionsResults: string;
    setVideoBGReadableResults: string;
    setVirtualBGImageResults: string;
}
export declare class ProcessorMain extends Emittery<EventDataMap> implements MediaProcessorInterface {
    private rate;
    private worker?;
    private static initCount;
    init(config: MediaProcessorConfig): Promise<void>;
    setTrackExpectedRate(rate: number): Promise<void>;
    setBackgroundOptions(options: BackgroundOptions): Promise<void>;
    transform(readable: ReadableStream<any>, writable: WritableStream<any>): Promise<void>;
    destroy(): Promise<void>;
    setFlickeringOptions(options: FlickeringOptions): Promise<void>;
    profile(duration: number): Promise<ResolvedWebglQuery[]>;
    private listenWorker;
}
