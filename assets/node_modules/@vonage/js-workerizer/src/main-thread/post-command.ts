import { CommandResolvers } from "../interfaces";
import { CommandType } from "./../interfaces";
import { isTransferable } from "./../utils/is-transferable";

/**
 * Number used to ensure unique id while posting commands
 * @internal
 */
let nextCommandId = 0;

/**
 * Post a command to a worker
 * @internal
 * @param worker Worker to send the command to
 * @param type Type of command
 * @param functionName Function to call on the proxied object
 * @param args Arguments used to call the proxied function
 * @param resolvers Map holding all command resolvers
 * @returns Promise resolved with  the command result when the worker respond
 */
export function postCommand(
  worker: Worker,
  type: CommandType,
  functionName: string,
  args: any[],
  resolvers?: CommandResolvers
): Promise<any> {
  const id = nextCommandId++;
  worker.postMessage(
    {
      id,
      type,
      functionName,
      args,
    },
    args.filter((a) => isTransferable(a))
  );

  const promise = new Promise((resolve) => {
    resolvers?.set(id, resolve);
  });

  return promise;
}
