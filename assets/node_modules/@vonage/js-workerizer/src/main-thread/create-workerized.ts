import {
  AnyClass,
  CommandResolvers,
  CommandType,
  Workerized,
} from "../interfaces";
import { postCommand } from "./post-command";
import { workerized } from "./workerized";

let nextId: number = 0;

/**
 * Create a proxy to the worker contained object
 * @internal
 * @param workerizedClass Proxied class
 * @param worker Worker containing the class instance
 * @param resolvers Map holding all commands resolvers
 * @returns Proxied object
 */
export async function createWorkerized<W extends Object>(
  workerizedClass: AnyClass,
  worker: Worker,
  resolvers: CommandResolvers
): Promise<Workerized<W>> {
  const result: any = {};
  const id = nextId++;
  Object.getOwnPropertyNames(workerizedClass.prototype).forEach(
    (functionName) => {
      result[functionName] = (...args: any[]) =>
        postCommand(worker, CommandType.FORWARD, functionName, args, resolvers);
    }
  );

  result.terminate = async (...args: any) => {
    const response = await postCommand(
      worker,
      CommandType.TERMINATE,
      "",
      args,
      resolvers
    );
    delete workerized[id];
    worker.terminate();
    result.workerContext.worker = undefined;
    return response;
  };

  result.workerContext = {
    id,
    worker,
    resolvers,
  };

  workerized[id] = result;

  return result as Workerized<W>;
}
