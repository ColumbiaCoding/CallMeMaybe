import { globals } from "../globals/globals";
import { globalsSync } from "../globals/globals-sync";
import { AnyClass, CommandResolvers, WorkerClass } from "../interfaces";
import { copy } from "../utils/copy";
import { Command, CommandType } from "./../interfaces";
import { postCommand } from "./post-command";

/**
 * Instantiate and initialize a worker.
 * @internal
 * @param workerizedClass Class hold by the worker that must be initialized
 * @param workerClass Worker class to instantiate
 * @param resolvers Map holding all commands resolvers
 * @returns Initialized worker
 */
export async function createWorker(
  workerizedClass: AnyClass,
  workerClass: WorkerClass,
  resolvers: CommandResolvers
): Promise<Worker> {
  const worker = new workerClass();

  // Bind message
  worker.addEventListener(
    "message",
    async ({ data }: MessageEvent<Command>) => {
      switch (data.type) {
        case CommandType.GLOBALS_SYNC:
          if (data.id) {
            resolvers.get(data.id ?? -1)?.(data.result);
            resolvers.delete(data.id ?? -1);
          } else {
            copy(data.result ?? {}, globals);
            await globalsSync();
          }
          break;

        default:
          resolvers.get(data.id ?? -1)?.(data.result);
          resolvers.delete(data.id ?? -1);
      }
    }
  );

  // Init
  const initialized = await postCommand(
    worker,
    CommandType.INIT,
    "",
    [(workerizedClass as any).workerId, globals],
    resolvers
  );
  if (!initialized) {
    throw "Failed to instantiate workerized class";
  }

  return worker;
}
