import { WorkerContext } from "../interfaces";
import { Command, CommandType } from "./../interfaces";
import { handleCommandForward } from "./handle-command-forward";
import { handleCommandInit } from "./handle-command-init";
import { isWorker } from "./../utils/is-worker";
import { handleCommandTerminate } from "./handle-command-terminate";
import { handleCommandGlobalsSync } from "./handle-command-globals-sync";

/**
 * Initialize the worker
 * @internal
 */
export function initWorker(): void {
  const context: WorkerContext = {};

  onmessage = async (event: MessageEvent<Command>) => {
    const command = event.data;
    switch (command.type) {
      case CommandType.INIT:
        handleCommandInit(command, context);
        break;
      case CommandType.FORWARD:
        handleCommandForward(command, context);
        break;
      case CommandType.TERMINATE:
        handleCommandTerminate(command, context);
        break;
      case CommandType.GLOBALS_SYNC:
        handleCommandGlobalsSync(command);
        break;
    }
  };
}

if (isWorker()) {
  initWorker();
}
