const o = {};
var a = /* @__PURE__ */ ((e) => (e.INIT = "INIT", e.FORWARD = "FORWARD", e.TERMINATE = "TERMINATE", e.GLOBALS_SYNC = "GLOBALS_SYNC", e))(a || {});
function I(e) {
  return [ImageBitmap, ReadableStream, WritableStream].some((n) => e instanceof n);
}
let N = 0;
function w(e, t, n, i, r) {
  const s = N++;
  return e.postMessage(
    {
      id: s,
      type: t,
      functionName: n,
      args: i
    },
    i.filter((l) => I(l))
  ), new Promise((l) => {
    r == null || r.set(s, l);
  });
}
function u(e, t) {
  const { id: n, type: i } = e, r = Array.isArray(t) ? t : [t];
  postMessage(
    {
      id: n,
      type: i,
      result: t
    },
    r.filter((s) => I(s))
  );
}
const d = {};
function y() {
  return typeof WorkerGlobalScope < "u" && self instanceof WorkerGlobalScope;
}
async function h() {
  if (y())
    u({ type: a.GLOBALS_SYNC }, o);
  else {
    const e = [];
    for (const t in d) {
      const { worker: n, resolvers: i } = d[t].workerContext;
      n && e.push(
        w(
          n,
          a.GLOBALS_SYNC,
          "",
          [o],
          i
        )
      );
    }
    await Promise.all(e);
  }
}
function f(e, t) {
  if (Array.isArray(t))
    t.splice(0, t.length);
  else if (typeof t == "object")
    for (const n in t)
      delete t[n];
  for (const n in e)
    Array.isArray(e[n]) ? (t[n] = [], f(e[n], t[n])) : typeof e[n] == "object" ? (t[n] = {}, f(e[n], t[n])) : t[n] = e[n];
}
async function L(e, t, n) {
  const i = new t();
  if (i.addEventListener(
    "message",
    async ({ data: s }) => {
      var c, l, k, p, A, g, b;
      switch (s.type) {
        case a.GLOBALS_SYNC:
          s.id ? ((l = n.get((c = s.id) != null ? c : -1)) == null || l(s.result), n.delete((k = s.id) != null ? k : -1)) : (f((p = s.result) != null ? p : {}, o), await h());
          break;
        default:
          (g = n.get((A = s.id) != null ? A : -1)) == null || g(s.result), n.delete((b = s.id) != null ? b : -1);
      }
    }
  ), !await w(
    i,
    a.INIT,
    "",
    [e.workerId, o],
    n
  ))
    throw "Failed to instantiate workerized class";
  return i;
}
let R = 0;
async function T(e, t, n) {
  const i = {}, r = R++;
  return Object.getOwnPropertyNames(e.prototype).forEach(
    (s) => {
      i[s] = (...c) => w(t, a.FORWARD, s, c, n);
    }
  ), i.terminate = async (...s) => {
    const c = await w(
      t,
      a.TERMINATE,
      "",
      s,
      n
    );
    return delete d[r], t.terminate(), i.workerContext.worker = void 0, c;
  }, i.workerContext = {
    id: r,
    worker: t,
    resolvers: n
  }, d[r] = i, i;
}
async function M(e, t) {
  const n = /* @__PURE__ */ new Map(), i = await L(e, t, n);
  return T(e, i, n);
}
async function W(e, t) {
  const { functionName: n, args: i } = e;
  if (!t.instance)
    throw "instance not initialized";
  if (!n)
    throw "missing function name to call";
  if (!t.instance[n])
    throw `undefined function [${n}] in class ${t.instance.constructor.workerId}`;
  u(e, await t.instance[n](...i != null ? i : []));
}
const S = {};
function z(e, t) {
  t.workerId = e, y() && (S[t.workerId] = t);
}
function C(e, t) {
  if (!e.args)
    throw "Missing className while initializing worker";
  const [n, i] = e.args, r = S[n];
  if (r)
    t.instance = new r(e.args.slice(1));
  else
    throw `unknown worker class ${n}`;
  f(i, o), u(e, typeof t.instance !== void 0);
}
async function O(e, t) {
  const { args: n } = e;
  if (!t.instance)
    throw "instance not initialized";
  let i;
  t.instance.terminate && (i = await t.instance.terminate(...n != null ? n : [])), u(e, i);
}
function G(e) {
  if (!e.args)
    throw "Missing globals while syncing";
  f(e.args[0], o), u(e, {});
}
function m() {
  const e = {};
  onmessage = async (t) => {
    const n = t.data;
    switch (n.type) {
      case a.INIT:
        C(n, e);
        break;
      case a.FORWARD:
        W(n, e);
        break;
      case a.TERMINATE:
        O(n, e);
        break;
      case a.GLOBALS_SYNC:
        G(n);
        break;
    }
  };
}
y() && m();
function E(e, t) {
  return o[e] || (o[e] = t), [
    () => o[e],
    async (n) => {
      o[e] = n, await h();
    }
  ];
}
function B(e, t) {
  return E(e, t);
}
export {
  a as CommandType,
  m as initWorker,
  B as registerGlobal,
  z as registerWorker,
  S as registeredWorkers,
  M as workerize
};
