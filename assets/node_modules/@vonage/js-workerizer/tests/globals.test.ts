import chai, { expect } from "chai";
import sinon from "sinon";
import { workerize } from "../src/index";
import { getMyGlobal, setMyGlobal } from "./my-global";
import { MyWorker } from "./my-worker";
import Worker from "./my-worker?worker";

describe("globals", () => {
  it("should init with default value", async () => {
    const workerized = await workerize(MyWorker, Worker);
    expect(getMyGlobal(), "Main value is not correct").to.equal(1);
    expect(
      await workerized.getGlobal(),
      "Worker value is not correct"
    ).to.equal(1);
    await workerized.terminate();
  });

  it("should set with current value when worker is created", async () => {
    setMyGlobal(2);

    const workerized = await workerize(MyWorker, Worker);
    expect(getMyGlobal(), "Main value is not correct").to.equal(2);
    expect(
      await workerized.getGlobal(),
      "Worker value is not correct"
    ).to.equal(2);
    await workerized.terminate();
  });

  it("should propagate from main to worker", async () => {
    const workerized = await workerize(MyWorker, Worker);

    setMyGlobal(3);
    expect(getMyGlobal(), "Main value is not correct").to.equal(3);
    expect(
      await workerized.getGlobal(),
      "Worker value is not correct"
    ).to.equal(3);
    await workerized.terminate();
  });

  it("should propagate from worker to main", async () => {
    const workerized = await workerize(MyWorker, Worker);

    await workerized.setGlobal(4);
    expect(getMyGlobal(), "Main value is not correct").to.equal(4);
    expect(
      await workerized.getGlobal(),
      "Worker value is not correct"
    ).to.equal(4);
    await workerized.terminate();
  });
});
