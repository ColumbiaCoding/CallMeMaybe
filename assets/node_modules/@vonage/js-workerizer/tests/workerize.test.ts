import chai, { expect } from "chai";
import sinon from "sinon";
import { workerize } from "../src/index";
import { MyWorker } from "./my-worker";
import Worker from "./my-worker?worker";

describe("workerize", () => {
  it("should start", async () => {
    const workerized = await workerize(MyWorker, Worker);
    expect(workerized).to.not.be.undefined;
    expect(workerized.workerContext.worker).to.not.be.undefined;
    await workerized.terminate();
  });

  it("should terminate worker", async () => {
    const workerized = await workerize(MyWorker, Worker);
    const worker = workerized.workerContext.worker as Worker;
    const spy = sinon.spy(worker, "terminate"); //chai.spy(worker.terminate);
    await workerized.terminate();
    expect(workerized.workerContext.worker).to.be.undefined;
    expect(spy.calledOnce).to.be.true;
  });

  it("should run on a worker", async () => {
    const normal = new MyWorker();
    const workerized = await workerize(MyWorker, Worker);
    expect(normal.isWorker()).to.be.false;
    expect(await workerized.isWorker()).to.be.true;
    await workerized.terminate();
  });

  it("should run on its dedicated thread", async () => {
    const normal1 = new MyWorker();
    const normal2 = new MyWorker();
    const workerized1 = await workerize(MyWorker, Worker);
    const workerized2 = await workerize(MyWorker, Worker);

    expect(normal1.value()).to.be.equal(0);
    expect(normal2.value()).to.be.equal(0);
    expect(await workerized1.value()).to.be.equal(0);
    expect(await workerized2.value()).to.be.equal(0);

    normal1.increment();
    await workerized1.increment();

    expect(normal2.value()).to.be.equal(1);
    expect(normal1.value()).to.be.equal(1);
    expect(await workerized1.value()).to.be.equal(1);
    expect(await workerized2.value()).to.be.equal(0);
    await workerized1.terminate();
    await workerized2.terminate();
  });

  it("should call terminate function when terminating worker", async () => {
    const workerized = await workerize(MyWorker, Worker);
    await workerized.increment(5);
    expect(await workerized.terminate()).to.be.equal(5);
  });
});
