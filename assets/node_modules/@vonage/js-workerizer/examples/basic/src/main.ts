import { TestWorker } from "./test-worker";
import Worker from "./test-worker?worker&inline";
import { workerize } from "../../../src/index";
import { Workerized } from "../../../src/index";

function loop() {
  const lightSpan = document.getElementById("light-circle") as HTMLElement;
  lightSpan.style.background =
    lightSpan.style.background == "red" ? "green" : "red";
  setTimeout(() => loop(), 250);
}

async function main() {
  loop();
  const _buttons = document.getElementById("buttons");
  const _working = document.getElementById("working");
  const _status = document.getElementById("status");
  const _buttonCreateWorker = document.getElementById("create-worker");
  const _buttonDestroyWorker = document.getElementById("destroy-worker");
  const _buttonRunMain = document.getElementById("run-main");
  const _buttonRunWorker = document.getElementById("run-worker");

  const onMainThread = new TestWorker();
  let onWorkerThread: Workerized<TestWorker> | undefined;

  let creating = false;

  _buttonRunMain!.onclick = async () => {
    await updateUI(true);
    onMainThread?.run();
    await updateUI(false);
  };

  _buttonRunWorker!.onclick = async () => {
    await updateUI(true);
    await onWorkerThread?.run();
    await updateUI(false);
  };

  _buttonCreateWorker!.onclick = async () => {
    await updateUI(true);
    onWorkerThread = await workerize(TestWorker, Worker);
    await updateUI(false);
  };

  _buttonDestroyWorker!.onclick = async () => {
    await updateUI(true);
    await onWorkerThread?.terminate();
    onWorkerThread = undefined;
    await updateUI(false);
  };

  updateUI(false);

  async function updateUI(working: boolean) {
    updateStatus(working);
    updateButtons(working);
    return new Promise((r) => setTimeout(() => r(null)));
  }

  function updateStatus(working: boolean) {
    _status!.innerHTML = onWorkerThread ? "INITIALIZED" : "NOT INITIALIZED";
    _status!.innerHTML += working ? " - WORKING" : " - NOT WORKING";
  }

  function updateButtons(working: boolean) {
    setVisibility(_buttonCreateWorker, !onWorkerThread && !working);
    setVisibility(_buttonDestroyWorker, !!onWorkerThread && !working);
    setVisibility(_buttonRunMain, !working);
    setVisibility(_buttonRunWorker, !working && !!onWorkerThread);
  }

  function setVisibility(tag: HTMLElement | null, visible: boolean) {
    tag!.style.display = visible ? "block" : "none";
  }
}

window.onload = main;
