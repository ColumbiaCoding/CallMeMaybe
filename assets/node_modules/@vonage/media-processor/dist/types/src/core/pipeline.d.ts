/// <reference types="dom-webcodecs" />
import Emittery from 'emittery';
/**
 * EventMetaData. Some metadata of the event.
 */
export declare type EventMetaData = {
    /**
     * The transformer index in the array of transformers.
     */
    transformerIndex: number;
};
/**
 * WarningType specifies the type of warning from the transformer
 */
export declare enum WarningType {
    /**
     * Warning about change in process rate
     */
    FPS_DROP = "fps_drop"
}
/**
 * DropInfo gives info about the frame rate of the transformer
 */
export declare type DropInfo = {
    /**
     * The rate predicted rate of the track
     */
    requested: number;
    /**
     * The actual rate of the track
     */
    current: number;
};
/**
 * WarnData - MediaProcessor warning event defintion
 */
export declare type WarnData = {
    /**
     * Meta data of the event
     */
    eventMetaData: EventMetaData;
    /**
     *  The waring type
     */
    warningType: WarningType;
    /**
     *  Optional - FPS drop info.
     */
    dropInfo?: DropInfo;
};
/**
 * ErrorFunction. It specifies the transformer function in which the error occurred.
 */
export declare enum ErrorFunction {
    /**
     * start function exception.
     */
    start = "start",
    /**
     * transform function exception.
     */
    transform = "transform",
    /**
     * flush function exception.
     */
    flush = "flush"
}
/**
 * ErrorData. MediaProcessor error data definition.
 */
export declare type ErrorData = {
    /**
     * Metadata of the event.
     */
    eventMetaData: EventMetaData;
    /**
     * The function in which the error occurred.
     */
    function: ErrorFunction;
    /**
     * Type of unknown but moslty will be string
     */
    error: unknown;
};
/**
 * PipelineInfolData. Life cycle information of insertable streams pipeline.
 */
export declare enum PipelineInfoData {
    /**
     * Notify the app that the pipeline has ended.
     */
    pipeline_ended = "pipeline_ended",
    /**
     * Notify the app that the pipeline has ended with an error.
     */
    pipeline_ended_with_error = "pipeline_ended_with_error",
    /**
     * Notify the app that the pipeline has started.
     */
    pipeline_started = "pipeline_started",
    /**
     * Notify the app that the pipeline has started with an error.
     */
    pipeline_started_with_error = "pipeline_started_with_error",
    /**
     * Notify the app that the pipeline has restarted.
     * This message is fired after changing track in the middle of the process.
     * For example switching camera source.
     */
    pipeline_restarted = "pipeline_restarted",
    /**
     * Notify the app that the pipeline has restarted with an error.
     * This message is fired after changing track in the middle of the process.
     * For example switching camera source.
     */
    pipeline_restarted_with_error = "pipeline_restarted_with_error"
}
/**
 * EventDataMap. A map type for all event options from MediaProcessor.
 * Each event will include only one type.
 */
export declare type EventDataMap = {
    /**
     * Warnings from the insertable streams pipeline.
     */
    warn: WarnData;
    /**
     * Errors from the insertable streams pipeline.
     */
    error: ErrorData;
    /**
     * Info from the insertable streams pipeline life cycle.
     */
    pipelineInfo: PipelineInfoData;
};
declare class InternalTransformer extends Emittery<EventDataMap> implements Transformer {
    uuid_: string;
    transformerType_: string;
    fps_: number;
    framesTransformed_: number;
    transformer_: Transformer;
    shouldStop_: boolean;
    isFlashed_: boolean;
    framesFromSource_: number;
    mediaTransformerQosReportStartTimestamp_: number;
    videoHeight_: number;
    videoWidth_: number;
    trackExpectedRate_: number;
    index_: number;
    controller_?: TransformStreamDefaultController;
    constructor(transformer: Transformer, index: number);
    setTrackExpectedRate(trackExpectedRate: number): void;
    start(controller: TransformStreamDefaultController): Promise<void>;
    transform(data: VideoFrame | AudioData, controller: TransformStreamDefaultController): Promise<void>;
    flush(controller: TransformStreamDefaultController): Promise<void>;
    stop(): void;
    mediaTransformerQosReport(): void;
}
declare class Pipeline extends Emittery<EventDataMap> {
    transformers_: Array<InternalTransformer>;
    trackExpectedRate_: number;
    constructor(transformers: Array<Transformer>);
    setTrackExpectedRate(trackExpectedRate: number): void;
    start(readable: ReadableStream, writeable: WritableStream): Promise<void>;
    destroy(): Promise<void>;
}
export default Pipeline;
