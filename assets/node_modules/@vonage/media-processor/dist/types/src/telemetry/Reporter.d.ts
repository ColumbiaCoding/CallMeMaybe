import { Optional } from 'typescript-optional';
/**
 * Enumeration listing all possible users or consumers of this library.
 */
export declare enum VonageSourceType {
    /**
     * @private
     */
    automation = "automation",
    /**
     * @private
     */
    test = "test",
    /**
     * @private
     */
    vbc = "vbc",
    /**
     * For Vonage Video SDK users.
     */
    video = "video",
    /**
     * For Vonage Voice SDK users.
     */
    voice = "voice"
}
/**
 * Specifies the addional information being sent with the telemetry collected by the library.
 */
export declare type VonageMetadata = {
    /**
     * Type of source using the library.
     */
    sourceType: VonageSourceType;
    /**
     * Some string identifier identifying the application using the library.
     */
    appId: string;
    /**
     * The proxy URL to route all internet traffic generated by this library. This field is optional.
     */
    proxyUrl?: string;
};
declare global {
    var _vonageMediaProcessorMetadata: VonageMetadata;
}
/**
 * Sets some metadata for telemetry.
 * An example can be found [here](/docs/intro.md#statistics).
 *
 * @param metadata  Specifies the addional information being sent with the telemetry collected by the library.
 *                  If metadata is either undefined or not set the library will not collect/send any telemetry.
 */
export declare function setVonageMetadata(metadata: VonageMetadata): void;
/**
 * @private
 */
export declare function getVonageMetadata(): VonageMetadata;
interface Report {
    action: Optional<string>;
    applicationId: Optional<string>;
    timestamp: number;
    fps: Optional<number>;
    framesTransformed: Optional<number>;
    guid: Optional<string>;
    highestFrameTransformCpu: Optional<number>;
    message: Optional<string>;
    source: Optional<string>;
    transformedFps: Optional<number>;
    transformerType: Optional<string>;
    variation: Optional<string>;
    videoHeight: Optional<number>;
    videoWidth: Optional<number>;
    version: string;
    error: Optional<string>;
    proxyUrl: Optional<string>;
}
declare class ReportBuilder {
    private readonly _report;
    constructor();
    action(action: string): this;
    framesTransformed(framesTransformed: number): this;
    fps(fps: number): this;
    guid(guid: string): this;
    message(message: string): this;
    transformedFps(transformedFps: number): this;
    transformerType(transformerType: string): this;
    variation(variation: string): this;
    videoHeight(videoHeight: number): this;
    videoWidth(videoWidth: number): this;
    error(error: string): this;
    build(): Report;
}
declare class Reporter {
    static report(report: Report): Promise<any>;
}
export { Report, ReportBuilder, Reporter };
